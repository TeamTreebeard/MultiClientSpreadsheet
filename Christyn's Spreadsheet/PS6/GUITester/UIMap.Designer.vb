'------------------------------------------------------------------------------
'  <auto-generated>
'      This code was generated by coded UI test builder.
'      Version: 12.0.0.0
'
'      Changes to this file may cause incorrect behavior and will be lost if
'      the code is regenerated.
'  </auto-generated>
' ------------------------------------------------------------------------------

Imports System
Imports System.CodeDom.Compiler
Imports System.Collections.Generic
Imports System.Drawing
Imports System.Text.RegularExpressions
Imports System.Windows.Input
Imports Microsoft.VisualStudio.TestTools.UITest.Extension
Imports Microsoft.VisualStudio.TestTools.UITesting
Imports Microsoft.VisualStudio.TestTools.UITesting.WinControls
Imports Microsoft.VisualStudio.TestTools.UnitTesting
Imports Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard
Imports Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse
Imports MouseButtons = System.Windows.Forms.MouseButtons

Namespace GUITester
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Partial Public Class UIMap
        
        '''<summary>
        '''confirms that the value of the formula cell updates when a dependent cell changes
        '''</summary>
        Public Sub assertFormulaUpdates()
            Dim uITextBox2Edit As WinEdit = Me.UISpreadsheetFormWindow.UITextBox2Window.UITextBox2Edit

            'Verify that the 'Text' property of 'textBox2' text box equals '2'
            Assert.AreEqual(Me.assertFormulaUpdatesExpectedValues.UITextBox2EditText, uITextBox2Edit.Text)
        End Sub
        
        '''<summary>
        '''inputs doubles and a formula, changes one of the doubles and confirms that the formula updates
        '''</summary>
        Public Sub enterDouble_Formula()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetFormWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uITextBox3Edit As WinEdit = Me.UISpreadsheetFormWindow.UITextBox3Window.UITextBox3Edit
            Dim uIEnterButton As WinButton = Me.UISpreadsheetFormWindow.UIEnterWindow.UIEnterButton

            'Launch '%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe'
            Dim uISpreadsheetFormWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.enterDouble_FormulaParams.UISpreadsheetFormWindowExePath, Me.enterDouble_FormulaParams.UISpreadsheetFormWindowAlternateExePath)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(86, 39))

            'Type '1' in 'textBox3' text box
            uITextBox3Edit.Text = Me.enterDouble_FormulaParams.UITextBox3EditText

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(23, 9))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(171, 46))

            'Type '2' in 'textBox3' text box
            uITextBox3Edit.Text = Me.enterDouble_FormulaParams.UITextBox3EditText1

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(27, 12))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(261, 41))

            'Type '=a1+b1' in 'textBox3' text box
            uITextBox3Edit.Text = Me.enterDouble_FormulaParams.UITextBox3EditText2

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(14, 7))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(77, 38))

            'Type '0' in 'textBox3' text box
            uITextBox3Edit.Text = Me.enterDouble_FormulaParams.UITextBox3EditText3

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(21, 14))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(233, 38))
        End Sub
        
        '''<summary>
        '''checks what happens when a circular or format exception would be hit and how the spreadsheet updates with formula errors
        '''</summary>
        Public Sub exceptionsANDerror()
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetFormWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uITextBox3Edit As WinEdit = Me.UISpreadsheetFormWindow.UITextBox3Window.UITextBox3Edit
            Dim uIOKButton As WinButton = Me.UIOKWindow.UIOKButton
            Dim uIEnterButton As WinButton = Me.UISpreadsheetFormWindow.UIEnterWindow.UIEnterButton

            'Launch '%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe'
            Dim uISpreadsheetFormWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.exceptionsANDerrorParams.UISpreadsheetFormWindowExePath, Me.exceptionsANDerrorParams.UISpreadsheetFormWindowAlternateExePath)

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(65, 42))

            'Type '=a1' in 'textBox3' text box
            uITextBox3Edit.Text = Me.exceptionsANDerrorParams.UITextBox3EditText

            'Type '{Enter}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, Me.exceptionsANDerrorParams.UITextBox3EditSendKeys, ModifierKeys.None)

            'Click 'OK' button
            Mouse.Click(uIOKButton, New Point(43, 14))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(88, 42))

            'Type '1' in 'textBox3' text box
            uITextBox3Edit.Text = Me.exceptionsANDerrorParams.UITextBox3EditText1

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(23, 8))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(150, 42))

            'Type '2' in 'textBox3' text box
            uITextBox3Edit.Text = Me.exceptionsANDerrorParams.UITextBox3EditText2

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(25, 13))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(239, 36))

            'Type '=a1+b1' in 'textBox3' text box
            uITextBox3Edit.Text = Me.exceptionsANDerrorParams.UITextBox3EditText3

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(5, 10))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(66, 39))

            'Type '' in 'textBox3' text box
            uITextBox3Edit.Text = Me.exceptionsANDerrorParams.UITextBox3EditText4

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(23, 14))

            'Type '2' in 'textBox3' text box
            uITextBox3Edit.Text = Me.exceptionsANDerrorParams.UITextBox3EditText5

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(16, 13))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(239, 38))

            'Type '=A1+w' in 'textBox3' text box
            uITextBox3Edit.Text = Me.exceptionsANDerrorParams.UITextBox3EditText6

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(23, 12))

            'Click 'OK' button
            Mouse.Click(uIOKButton, New Point(23, 15))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(242, 42))

            'Type '4' in 'textBox3' text box
            uITextBox3Edit.Text = Me.exceptionsANDerrorParams.UITextBox3EditText7

            'Click 'Enter' button
            Mouse.Click(uIEnterButton, New Point(18, 11))
        End Sub
        
        '''<summary>
        '''shows that help button works
        '''</summary>
        Public Sub helpButton()
            Dim uIHelpMenuItem As WinMenuItem = Me.UISpreadsheetFormWindow.UIMenuStrip1MenuBar.UIHelpMenuItem
            Dim uIOKButton As WinButton = Me.UIOKWindow.UIOKButton
            Dim uISpreadsheetPanel1Client As WinClient = Me.UISpreadsheetFormWindow.UIItemWindow.UISpreadsheetPanel1Client
            Dim uITextBox3Edit As WinEdit = Me.UISpreadsheetFormWindow.UITextBox3Window.UITextBox3Edit

            'Launch '%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe'
            Dim uISpreadsheetFormWindow As ApplicationUnderTest = ApplicationUnderTest.Launch(Me.helpButtonParams.UISpreadsheetFormWindowExePath, Me.helpButtonParams.UISpreadsheetFormWindowAlternateExePath)

            'Click 'Help' menu item
            Mouse.Click(uIHelpMenuItem, New Point(22, 8))

            'Click 'OK' button
            Mouse.Click(uIOKButton, New Point(32, 15))

            'Click 'spreadsheetPanel1' client
            Mouse.Click(uISpreadsheetPanel1Client, New Point(67, 42))

            'Type '{Up}{Left}{Down}{Right}{Down}{Right}{Up}{Left}' in 'textBox3' text box
            Keyboard.SendKeys(uITextBox3Edit, Me.helpButtonParams.UITextBox3EditSendKeys, ModifierKeys.None)
        End Sub
        
        '''<summary>
        '''checks that the cell value is unchanged after errors
        '''</summary>
        Public Sub Unchanged_After_Errors()
            Dim uITextBox2Edit As WinEdit = Me.UISpreadsheetFormWindow.UITextBox2Window.UITextBox2Edit

            'Verify that the 'Text' property of 'textBox2' text box equals '4'
            Assert.AreEqual(Me.Unchanged_After_ErrorsExpectedValues.UITextBox2EditText, uITextBox2Edit.Text, "should be unchanged")
        End Sub
        
        #Region "Properties"
        Public Overridable ReadOnly Property assertFormulaUpdatesExpectedValues() As assertFormulaUpdatesExpectedValues
            Get
                If (Me.massertFormulaUpdatesExpectedValues Is Nothing) Then
                    Me.massertFormulaUpdatesExpectedValues = New assertFormulaUpdatesExpectedValues()
                End If
                Return Me.massertFormulaUpdatesExpectedValues
            End Get
        End Property
        
        Public Overridable ReadOnly Property enterDouble_FormulaParams() As enterDouble_FormulaParams
            Get
                If (Me.menterDouble_FormulaParams Is Nothing) Then
                    Me.menterDouble_FormulaParams = New enterDouble_FormulaParams()
                End If
                Return Me.menterDouble_FormulaParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property exceptionsANDerrorParams() As exceptionsANDerrorParams
            Get
                If (Me.mexceptionsANDerrorParams Is Nothing) Then
                    Me.mexceptionsANDerrorParams = New exceptionsANDerrorParams()
                End If
                Return Me.mexceptionsANDerrorParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property helpButtonParams() As helpButtonParams
            Get
                If (Me.mhelpButtonParams Is Nothing) Then
                    Me.mhelpButtonParams = New helpButtonParams()
                End If
                Return Me.mhelpButtonParams
            End Get
        End Property
        
        Public Overridable ReadOnly Property Unchanged_After_ErrorsExpectedValues() As Unchanged_After_ErrorsExpectedValues
            Get
                If (Me.mUnchanged_After_ErrorsExpectedValues Is Nothing) Then
                    Me.mUnchanged_After_ErrorsExpectedValues = New Unchanged_After_ErrorsExpectedValues()
                End If
                Return Me.mUnchanged_After_ErrorsExpectedValues
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetFormWindow() As UISpreadsheetFormWindow
            Get
                If (Me.mUISpreadsheetFormWindow Is Nothing) Then
                    Me.mUISpreadsheetFormWindow = New UISpreadsheetFormWindow()
                End If
                Return Me.mUISpreadsheetFormWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOKWindow() As UIOKWindow
            Get
                If (Me.mUIOKWindow Is Nothing) Then
                    Me.mUIOKWindow = New UIOKWindow()
                End If
                Return Me.mUIOKWindow
            End Get
        End Property
        
        Public ReadOnly Property UIWarningWindow() As UIWarningWindow
            Get
                If (Me.mUIWarningWindow Is Nothing) Then
                    Me.mUIWarningWindow = New UIWarningWindow()
                End If
                Return Me.mUIWarningWindow
            End Get
        End Property
        
        Public ReadOnly Property UISaveAsWindow() As UISaveAsWindow
            Get
                If (Me.mUISaveAsWindow Is Nothing) Then
                    Me.mUISaveAsWindow = New UISaveAsWindow()
                End If
                Return Me.mUISaveAsWindow
            End Get
        End Property
        
        Public ReadOnly Property UIConfirmSaveAsWindow() As UIConfirmSaveAsWindow
            Get
                If (Me.mUIConfirmSaveAsWindow Is Nothing) Then
                    Me.mUIConfirmSaveAsWindow = New UIConfirmSaveAsWindow()
                End If
                Return Me.mUIConfirmSaveAsWindow
            End Get
        End Property
        
        Public ReadOnly Property UIOpenWindow() As UIOpenWindow
            Get
                If (Me.mUIOpenWindow Is Nothing) Then
                    Me.mUIOpenWindow = New UIOpenWindow()
                End If
                Return Me.mUIOpenWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private massertFormulaUpdatesExpectedValues As assertFormulaUpdatesExpectedValues
        
        Private menterDouble_FormulaParams As enterDouble_FormulaParams
        
        Private mexceptionsANDerrorParams As exceptionsANDerrorParams
        
        Private mhelpButtonParams As helpButtonParams
        
        Private mUnchanged_After_ErrorsExpectedValues As Unchanged_After_ErrorsExpectedValues
        
        Private mUISpreadsheetFormWindow As UISpreadsheetFormWindow
        
        Private mUIOKWindow As UIOKWindow
        
        Private mUIWarningWindow As UIWarningWindow
        
        Private mUISaveAsWindow As UISaveAsWindow
        
        Private mUIConfirmSaveAsWindow As UIConfirmSaveAsWindow
        
        Private mUIOpenWindow As UIOpenWindow
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'assertFormulaUpdates'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class assertFormulaUpdatesExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of 'textBox2' text box equals '2'
        '''</summary>
        Public UITextBox2EditText As String = "2"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'enterDouble_Formula'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class enterDouble_FormulaParams
        
        #Region "Fields"
        '''<summary>
        '''Launch '%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetFormWindowExePath As String = "C:\Program Files (x86)\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Launch '%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetFormWindowAlternateExePath As String = "%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Type '1' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText As String = "1"
        
        '''<summary>
        '''Type '2' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText1 As String = "2"
        
        '''<summary>
        '''Type '=a1+b1' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText2 As String = "=a1+b1"
        
        '''<summary>
        '''Type '0' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText3 As String = "0"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'exceptionsANDerror'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class exceptionsANDerrorParams
        
        #Region "Fields"
        '''<summary>
        '''Launch '%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetFormWindowExePath As String = "C:\Program Files (x86)\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Launch '%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetFormWindowAlternateExePath As String = "%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Type '=a1' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText As String = "=a1"
        
        '''<summary>
        '''Type '{Enter}' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditSendKeys As String = "{Enter}"
        
        '''<summary>
        '''Type '1' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText1 As String = "1"
        
        '''<summary>
        '''Type '2' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText2 As String = "2"
        
        '''<summary>
        '''Type '=a1+b1' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText3 As String = "=a1+b1"
        
        '''<summary>
        '''Type '' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText4 As String = ""
        
        '''<summary>
        '''Type '2' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText5 As String = "2"
        
        '''<summary>
        '''Type '=A1+w' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText6 As String = "=A1+w"
        
        '''<summary>
        '''Type '4' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditText7 As String = "4"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'helpButton'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class helpButtonParams
        
        #Region "Fields"
        '''<summary>
        '''Launch '%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetFormWindowExePath As String = "C:\Program Files (x86)\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Launch '%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe'
        '''</summary>
        Public UISpreadsheetFormWindowAlternateExePath As String = "%ProgramFiles%\Hewlett-Packard Company\Spreadsheet\SpreadsheetGUI.exe"
        
        '''<summary>
        '''Type '{Up}{Left}{Down}{Right}{Down}{Right}{Up}{Left}' in 'textBox3' text box
        '''</summary>
        Public UITextBox3EditSendKeys As String = "{Up}{Left}{Down}{Right}{Down}{Right}{Up}{Left}"
        #End Region
    End Class
    
    '''<summary>
    '''Parameters to be passed into 'Unchanged_After_Errors'
    '''</summary>
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class Unchanged_After_ErrorsExpectedValues
        
        #Region "Fields"
        '''<summary>
        '''Verify that the 'Text' property of 'textBox2' text box equals '4'
        '''</summary>
        Public UITextBox2EditText As String = "4"
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UISpreadsheetFormWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Spreadsheet Form"
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.WindowTitles.Add("Spreadsheet Form")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemWindow() As UIItemWindow
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow(Me)
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        
        Public ReadOnly Property UITextBox3Window() As UITextBox3Window
            Get
                If (Me.mUITextBox3Window Is Nothing) Then
                    Me.mUITextBox3Window = New UITextBox3Window(Me)
                End If
                Return Me.mUITextBox3Window
            End Get
        End Property
        
        Public ReadOnly Property UIEnterWindow() As UIEnterWindow
            Get
                If (Me.mUIEnterWindow Is Nothing) Then
                    Me.mUIEnterWindow = New UIEnterWindow(Me)
                End If
                Return Me.mUIEnterWindow
            End Get
        End Property
        
        Public ReadOnly Property UITextBox2Window() As UITextBox2Window
            Get
                If (Me.mUITextBox2Window Is Nothing) Then
                    Me.mUITextBox2Window = New UITextBox2Window(Me)
                End If
                Return Me.mUITextBox2Window
            End Get
        End Property
        
        Public ReadOnly Property UIMenuStrip1MenuBar() As UIMenuStrip1MenuBar
            Get
                If (Me.mUIMenuStrip1MenuBar Is Nothing) Then
                    Me.mUIMenuStrip1MenuBar = New UIMenuStrip1MenuBar(Me)
                End If
                Return Me.mUIMenuStrip1MenuBar
            End Get
        End Property
        
        Public ReadOnly Property UISpreadsheetFormTitleBar() As UISpreadsheetFormTitleBar
            Get
                If (Me.mUISpreadsheetFormTitleBar Is Nothing) Then
                    Me.mUISpreadsheetFormTitleBar = New UISpreadsheetFormTitleBar(Me)
                End If
                Return Me.mUISpreadsheetFormTitleBar
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemWindow As UIItemWindow
        
        Private mUITextBox3Window As UITextBox3Window
        
        Private mUIEnterWindow As UIEnterWindow
        
        Private mUITextBox2Window As UITextBox2Window
        
        Private mUIMenuStrip1MenuBar As UIMenuStrip1MenuBar
        
        Private mUISpreadsheetFormTitleBar As UISpreadsheetFormTitleBar
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIItemWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties.Add(New PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains))
            Me.SearchProperties(WinWindow.PropertyNames.Instance) = "2"
            Me.WindowTitles.Add("Spreadsheet Form")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISpreadsheetPanel1Client() As WinClient
            Get
                If (Me.mUISpreadsheetPanel1Client Is Nothing) Then
                    Me.mUISpreadsheetPanel1Client = New WinClient(Me)
                    Me.mUISpreadsheetPanel1Client.WindowTitles.Add("Spreadsheet Form")
                End If
                Return Me.mUISpreadsheetPanel1Client
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISpreadsheetPanel1Client As WinClient
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UITextBox3Window
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "textBox3"
            Me.WindowTitles.Add("Spreadsheet Form")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITextBox3Edit() As WinEdit
            Get
                If (Me.mUITextBox3Edit Is Nothing) Then
                    Me.mUITextBox3Edit = New WinEdit(Me)
                    Me.mUITextBox3Edit.WindowTitles.Add("Spreadsheet Form")
                End If
                Return Me.mUITextBox3Edit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITextBox3Edit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIEnterWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "evaluate"
            Me.WindowTitles.Add("Spreadsheet Form")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIEnterButton() As WinButton
            Get
                If (Me.mUIEnterButton Is Nothing) Then
                    Me.mUIEnterButton = New WinButton(Me)
                    Me.mUIEnterButton.SearchProperties(WinButton.PropertyNames.Name) = "Enter"
                    Me.mUIEnterButton.WindowTitles.Add("Spreadsheet Form")
                End If
                Return Me.mUIEnterButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIEnterButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UITextBox2Window
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlName) = "textBox2"
            Me.WindowTitles.Add("Spreadsheet Form")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITextBox2Edit() As WinEdit
            Get
                If (Me.mUITextBox2Edit Is Nothing) Then
                    Me.mUITextBox2Edit = New WinEdit(Me)
                    Me.mUITextBox2Edit.WindowTitles.Add("Spreadsheet Form")
                End If
                Return Me.mUITextBox2Edit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITextBox2Edit As WinEdit
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIMenuStrip1MenuBar
        Inherits WinMenuBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenu.PropertyNames.Name) = "menuStrip1"
            Me.WindowTitles.Add("Spreadsheet Form")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIHelpMenuItem() As WinMenuItem
            Get
                If (Me.mUIHelpMenuItem Is Nothing) Then
                    Me.mUIHelpMenuItem = New WinMenuItem(Me)
                    Me.mUIHelpMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Help"
                    Me.mUIHelpMenuItem.WindowTitles.Add("Spreadsheet Form")
                End If
                Return Me.mUIHelpMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UIFileMenuItem() As UIFileMenuItem
            Get
                If (Me.mUIFileMenuItem Is Nothing) Then
                    Me.mUIFileMenuItem = New UIFileMenuItem(Me)
                End If
                Return Me.mUIFileMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIHelpMenuItem As WinMenuItem
        
        Private mUIFileMenuItem As UIFileMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIFileMenuItem
        Inherits WinMenuItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinMenuItem.PropertyNames.Name) = "File"
            Me.WindowTitles.Add("Spreadsheet Form")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICloseMenuItem() As WinMenuItem
            Get
                If (Me.mUICloseMenuItem Is Nothing) Then
                    Me.mUICloseMenuItem = New WinMenuItem(Me)
                    Me.mUICloseMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Close"
                    Me.mUICloseMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUICloseMenuItem.WindowTitles.Add("Spreadsheet Form")
                End If
                Return Me.mUICloseMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UINewMenuItem() As WinMenuItem
            Get
                If (Me.mUINewMenuItem Is Nothing) Then
                    Me.mUINewMenuItem = New WinMenuItem(Me)
                    Me.mUINewMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "New"
                    Me.mUINewMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUINewMenuItem.WindowTitles.Add("Spreadsheet Form")
                End If
                Return Me.mUINewMenuItem
            End Get
        End Property
        
        Public ReadOnly Property UIOpenMenuItem() As WinMenuItem
            Get
                If (Me.mUIOpenMenuItem Is Nothing) Then
                    Me.mUIOpenMenuItem = New WinMenuItem(Me)
                    Me.mUIOpenMenuItem.SearchProperties(WinMenuItem.PropertyNames.Name) = "Open"
                    Me.mUIOpenMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching)
                    Me.mUIOpenMenuItem.WindowTitles.Add("Spreadsheet Form")
                End If
                Return Me.mUIOpenMenuItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICloseMenuItem As WinMenuItem
        
        Private mUINewMenuItem As WinMenuItem
        
        Private mUIOpenMenuItem As WinMenuItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UISpreadsheetFormTitleBar
        Inherits WinTitleBar
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.WindowTitles.Add("Spreadsheet Form")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UICloseButton() As WinButton
            Get
                If (Me.mUICloseButton Is Nothing) Then
                    Me.mUICloseButton = New WinButton(Me)
                    Me.mUICloseButton.SearchProperties(WinButton.PropertyNames.Name) = "Close"
                    Me.mUICloseButton.WindowTitles.Add("Spreadsheet Form")
                End If
                Return Me.mUICloseButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUICloseButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIOKWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "OK"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "Button"
            Me.WindowTitles.Add("OK")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIOKButton() As WinButton
            Get
                If (Me.mUIOKButton Is Nothing) Then
                    Me.mUIOKButton = New WinButton(Me)
                    Me.mUIOKButton.SearchProperties(WinButton.PropertyNames.Name) = "OK"
                    Me.mUIOKButton.WindowTitles.Add("OK")
                End If
                Return Me.mUIOKButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIOKButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIWarningWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Warning"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIYesWindow() As UIYesWindow
            Get
                If (Me.mUIYesWindow Is Nothing) Then
                    Me.mUIYesWindow = New UIYesWindow(Me)
                End If
                Return Me.mUIYesWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIYesWindow As UIYesWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIYesWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlId) = "6"
            Me.WindowTitles.Add("Warning")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIYesButton() As WinButton
            Get
                If (Me.mUIYesButton Is Nothing) Then
                    Me.mUIYesButton = New WinButton(Me)
                    Me.mUIYesButton.SearchProperties(WinButton.PropertyNames.Name) = "Yes"
                    Me.mUIYesButton.WindowTitles.Add("Warning")
                End If
                Return Me.mUIYesButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIYesButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UISaveAsWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Save As"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIDetailsPanePane() As UIDetailsPanePane
            Get
                If (Me.mUIDetailsPanePane Is Nothing) Then
                    Me.mUIDetailsPanePane = New UIDetailsPanePane(Me)
                End If
                Return Me.mUIDetailsPanePane
            End Get
        End Property
        
        Public ReadOnly Property UISaveWindow() As UISaveWindow
            Get
                If (Me.mUISaveWindow Is Nothing) Then
                    Me.mUISaveWindow = New UISaveWindow(Me)
                End If
                Return Me.mUISaveWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIDetailsPanePane As UIDetailsPanePane
        
        Private mUISaveWindow As UISaveWindow
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIDetailsPanePane
        Inherits WinPane
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinControl.PropertyNames.Name) = "Details Pane"
            Me.WindowTitles.Add("Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIFilenameComboBox() As WinComboBox
            Get
                If (Me.mUIFilenameComboBox Is Nothing) Then
                    Me.mUIFilenameComboBox = New WinComboBox(Me)
                    Me.mUIFilenameComboBox.SearchProperties(WinComboBox.PropertyNames.Name) = "File name:"
                    Me.mUIFilenameComboBox.WindowTitles.Add("Save As")
                End If
                Return Me.mUIFilenameComboBox
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIFilenameComboBox As WinComboBox
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UISaveWindow
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.ControlId) = "1"
            Me.WindowTitles.Add("Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UISaveButton() As WinButton
            Get
                If (Me.mUISaveButton Is Nothing) Then
                    Me.mUISaveButton = New WinButton(Me)
                    Me.mUISaveButton.SearchProperties(WinButton.PropertyNames.Name) = "Save"
                    Me.mUISaveButton.WindowTitles.Add("Save As")
                End If
                Return Me.mUISaveButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUISaveButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIConfirmSaveAsWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Confirm Save As"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Confirm Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIConfirmSaveAsPane() As UIConfirmSaveAsPane
            Get
                If (Me.mUIConfirmSaveAsPane Is Nothing) Then
                    Me.mUIConfirmSaveAsPane = New UIConfirmSaveAsPane(Me)
                End If
                Return Me.mUIConfirmSaveAsPane
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIConfirmSaveAsPane As UIConfirmSaveAsPane
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIConfirmSaveAsPane
        Inherits WinPane
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinControl.PropertyNames.Name) = "Confirm Save As"
            Me.WindowTitles.Add("Confirm Save As")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIYesButton() As WinButton
            Get
                If (Me.mUIYesButton Is Nothing) Then
                    Me.mUIYesButton = New WinButton(Me)
                    Me.mUIYesButton.SearchProperties(WinButton.PropertyNames.Name) = "Yes"
                    Me.mUIYesButton.WindowTitles.Add("Confirm Save As")
                End If
                Return Me.mUIYesButton
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIYesButton As WinButton
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIOpenWindow
        Inherits WinWindow
        
        Public Sub New()
            MyBase.New
            Me.SearchProperties(WinWindow.PropertyNames.Name) = "Open"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "#32770"
            Me.WindowTitles.Add("Open")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UIItemWindow() As UIItemWindow1
            Get
                If (Me.mUIItemWindow Is Nothing) Then
                    Me.mUIItemWindow = New UIItemWindow1(Me)
                End If
                Return Me.mUIItemWindow
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUIItemWindow As UIItemWindow1
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UIItemWindow1
        Inherits WinWindow
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinWindow.PropertyNames.AccessibleName) = "Items View"
            Me.SearchProperties(WinWindow.PropertyNames.ClassName) = "DirectUIHWND"
            Me.WindowTitles.Add("Open")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UITest1sprdListItem() As UITest1sprdListItem
            Get
                If (Me.mUITest1sprdListItem Is Nothing) Then
                    Me.mUITest1sprdListItem = New UITest1sprdListItem(Me)
                End If
                Return Me.mUITest1sprdListItem
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUITest1sprdListItem As UITest1sprdListItem
        #End Region
    End Class
    
    <GeneratedCode("Coded UITest Builder", "12.0.30501.0")>  _
    Public Class UITest1sprdListItem
        Inherits WinListItem
        
        Public Sub New(ByVal searchLimitContainer As UITestControl)
            MyBase.New(searchLimitContainer)
            Me.SearchProperties(WinListItem.PropertyNames.Name) = "test1.sprd"
            Me.WindowTitles.Add("Open")
        End Sub
        
        #Region "Properties"
        Public ReadOnly Property UINameEdit() As WinEdit
            Get
                If (Me.mUINameEdit Is Nothing) Then
                    Me.mUINameEdit = New WinEdit(Me)
                    Me.mUINameEdit.SearchProperties(WinEdit.PropertyNames.Name) = "Name"
                    Me.mUINameEdit.WindowTitles.Add("Open")
                End If
                Return Me.mUINameEdit
            End Get
        End Property
        #End Region
        
        #Region "Fields"
        Private mUINameEdit As WinEdit
        #End Region
    End Class
End Namespace
